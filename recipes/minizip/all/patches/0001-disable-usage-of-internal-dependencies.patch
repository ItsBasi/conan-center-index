diff --git a/CMakeLists.txt b/CMakeLists.txt
index a6deb4c..bb1ce2f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -69,98 +69,27 @@ set(PC_PRIVATE_LIBS)
 
 # Check if zlib installation is present
 if(MZ_ZLIB AND NOT MZ_LIBCOMP)
-    if(NOT ZLIB_FORCE_FETCH)
-        find_package(ZLIB QUIET)
-    endif()
-    if(ZLIB_FOUND AND NOT ZLIB_FORCE_FETCH)
-        message(STATUS "Using ZLIB ${ZLIB_VERSION_STRING}")
-        list(APPEND MINIZIP_INC ${ZLIB_INCLUDE_DIRS})
-        set(PC_PRIVATE_LIBS " -lz")
-    else()
-        if(NOT ZLIB_TAG)
-            set(ZLIB_TAG master)
-        endif()
-        if(NOT ZLIB_REPOSITORY)
-            set(ZLIB_REPOSITORY https://github.com/madler/zlib)
-        endif()
-
-        message(STATUS "Fetching ZLIB ${ZLIB_REPOSITORY} ${ZLIB_TAG}")
-
-        if(${CMAKE_VERSION} VERSION_LESS "3.11")
-            message(FATAL_ERROR "CMake 3.11 required to fetch zlib")
-        else()
-            include(FetchContent)
-
-            set(ZLIB_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/zlib)
-
-            FetchContent_Declare(zlib
-                GIT_REPOSITORY ${ZLIB_REPOSITORY}
-                GIT_TAG ${ZLIB_TAG}
-                GIT_SHALLOW TRUE
-                SOURCE_DIR ${ZLIB_SOURCE_DIR}
-                BINARY_DIR ${ZLIB_SOURCE_DIR})
-
-            FetchContent_GetProperties(zlib
-                POPULATED ZLIB_POPULATED)
-            if(NOT ZLIB_POPULATED)
-                FetchContent_Populate(zlib)
-                add_subdirectory(${ZLIB_SOURCE_DIR} ${ZLIB_BINARY_DIR} EXCLUDE_FROM_ALL)
-            endif()
-
-            list(APPEND MINIZIP_INC ${ZLIB_SOURCE_DIR})
-        endif()
-    endif()
+    find_package(ZLIB REQUIRED)
+    message(STATUS "Using ZLIB ${ZLIB_VERSION_STRING}")
+    list(APPEND MINIZIP_INC ${ZLIB_INCLUDE_DIRS})
+    set(PC_PRIVATE_LIBS " -lz")
 endif()
 
 # Check if zstd installation is present
 if(MZ_ZSTD)
-    if(NOT ZSTD_FORCE_FETCH)
-        find_package(ZSTD QUIET)
-    endif()
-    if(ZSTD_FOUND AND NOT ZSTD_FORCE_FETCH)
-        message(STATUS "Using ZSTD")
-        list(APPEND MINIZIP_INC ${ZSTD_INCLUDE_DIRS})
-        set(PC_PRIVATE_LIBS "${PC_PRIVATE_LIBS} -lzstd")
-    else()
-        if(NOT ZSTD_REPOSITORY)
-            set(ZSTD_REPOSITORY https://github.com/facebook/zstd)
-        endif()
-
-        message(STATUS "Fetching ZSTD ${ZSTD_REPOSITORY}")
-
-        if(${CMAKE_VERSION} VERSION_LESS "3.11")
-            message(FATAL_ERROR "CMake 3.11 required to fetch zlib")
-        else()
-            include(FetchContent)
-
-            set(ZSTD_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/zstd)
-
-            FetchContent_Declare(zstd
-                GIT_REPOSITORY ${ZSTD_REPOSITORY}
-                SOURCE_DIR ${ZSTD_SOURCE_DIR}
-                BINARY_DIR ${ZSTD_SOURCE_DIR})
-
-            FetchContent_GetProperties(zstd
-                POPULATED ZSTD_POPULATED)
-            if(NOT ZSTD_POPULATED)
-                FetchContent_Populate(zstd)
-                add_subdirectory(${ZSTD_SOURCE_DIR}/build/cmake ${ZSTD_BINARY_DIR} EXCLUDE_FROM_ALL)
-            endif()
-
-            list(APPEND MINIZIP_INC ${ZSTD_SOURCE_DIR}/lib)
-        endif()
-    endif()
+    find_package(ZSTD REQUIRED)
+    message(STATUS "Using ZSTD")
+    list(APPEND MINIZIP_INC ${zstd_INCLUDE_DIRS})
+    set(PC_PRIVATE_LIBS "${PC_PRIVATE_LIBS} -lzstd")
 endif()
 
 # Check if bzip2 installation is present
 if(MZ_BZIP2)
-    find_package(BZip2)
-    if(BZIP2_FOUND)
-        message(STATUS "Using BZIP2 ${BZIP2_VERSION_STRING}")
-        list(APPEND MINIZIP_INC ${BZIP2_INCLUDE_DIRS})
-        list(APPEND MINIZIP_DEF -DHAVE_BZIP2)
-        set(PC_PRIVATE_LIBS "${PC_PRIVATE_LIBS} -lbzip2")
-    endif()
+    find_package(BZip2 REQUIRED)
+    message(STATUS "Using BZIP2 ${BZIP2_VERSION_STRING}")
+    list(APPEND MINIZIP_INC ${BZip2_INCLUDE_DIRS})
+    list(APPEND MINIZIP_DEF -DHAVE_BZIP2)
+    set(PC_PRIVATE_LIBS "${PC_PRIVATE_LIBS} -lbzip2")
 endif()
 
 # Check to see if openssl installation is present
